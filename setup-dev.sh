#!/bin/bash

# NFT Rental Marketplace Development Setup Script
# This script automates the deployment of smart contracts and updates the frontend environment

set -e  # Exit on any error

echo "ðŸš€ Starting NFT Rental Marketplace Development Setup"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if required tools are installed
check_dependencies() {
    print_status "Checking dependencies..."

    if ! command -v forge &> /dev/null; then
        print_error "Foundry (forge) is not installed. Please install it from https://book.getfoundry.sh/getting-started/installation.html"
        exit 1
    fi

    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed. Please install it from https://nodejs.org/"
        exit 1
    fi

    if ! command -v npm &> /dev/null; then
        print_error "npm is not installed. Please install Node.js which includes npm."
        exit 1
    fi

    print_success "All dependencies are installed"
}

# Start Anvil in background
start_anvil() {
    print_status "Starting Anvil local Ethereum node..."

    # Kill any existing Anvil processes
    pkill -f anvil || true

    # Start Anvil in background
    anvil --host 0.0.0.0 --port 8545 > /dev/null 2>&1 &
    ANVIL_PID=$!

    # Wait for Anvil to start
    sleep 3

    if kill -0 $ANVIL_PID 2>/dev/null; then
        print_success "Anvil started successfully (PID: $ANVIL_PID)"
    else
        print_error "Failed to start Anvil"
        exit 1
    fi
}

# Deploy smart contracts
deploy_contracts() {
    print_status "Deploying smart contracts..."

    # Set the private key for deployment (Anvil's default first account)
    export PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

    # Build contracts first
    if ! forge build; then
        print_error "Failed to build contracts"
        exit 1
    fi

    # Deploy contracts
    print_status "Deploying smart contracts..."
    DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol --rpc-url http://127.0.0.1:8545 --broadcast --private-key $PRIVATE_KEY 2>&1)

    # Check if deployment was successful
    if echo "$DEPLOY_OUTPUT" | grep -q "Error:"; then
        print_error "Deployment failed:"
        echo "$DEPLOY_OUTPUT"
        exit 1
    fi

    # Parse addresses from deployment output
    RENTABLE_721=$(echo "$DEPLOY_OUTPUT" | grep "RENTABLE_721:" | awk '{print $2}')
    LISTING_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "LISTING_MANAGER:" | awk '{print $2}')
    RENTAL_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "RENTAL_MANAGER:" | awk '{print $2}')
    ESCROW=$(echo "$DEPLOY_OUTPUT" | grep "ESCROW:" | awk '{print $2}')
    SUB_PASS_1155=$(echo "$DEPLOY_OUTPUT" | grep "SUB_PASS_1155:" | awk '{print $2}')

    # Generate .env.local file
    cat > frontend/.env.local << EOF
# Contract Addresses (Auto-generated by deployment script)
NEXT_PUBLIC_RENTABLE_721_BASE=$RENTABLE_721
NEXT_PUBLIC_RENTABLE_721_POLYGON=$RENTABLE_721
NEXT_PUBLIC_LISTING_MANAGER_BASE=$LISTING_MANAGER
NEXT_PUBLIC_LISTING_MANAGER_POLYGON=$LISTING_MANAGER
NEXT_PUBLIC_RENTAL_MANAGER_BASE=$RENTAL_MANAGER
NEXT_PUBLIC_RENTAL_MANAGER_POLYGON=$RENTAL_MANAGER
NEXT_PUBLIC_ESCROW_BASE=$ESCROW
NEXT_PUBLIC_ESCROW_POLYGON=$ESCROW
NEXT_PUBLIC_SUB_PASS_1155_BASE=$SUB_PASS_1155
NEXT_PUBLIC_SUB_PASS_1155_POLYGON=$SUB_PASS_1155
EOF

    print_success "Environment file generated at frontend/.env.local"
}

# Setup frontend environment
setup_frontend() {
    print_status "Setting up frontend environment..."

    cd frontend

    # Install dependencies if node_modules doesn't exist
    if [ ! -d "node_modules" ]; then
        print_status "Installing frontend dependencies..."
        if ! npm install; then
            print_error "Failed to install frontend dependencies"
            exit 1
        fi
    fi

    # Check if .env.local was created by deployment script
    if [ -f ".env.local" ]; then
        print_success "Environment file created with deployed contract addresses"
        echo "ðŸ“„ .env.local contents:"
        cat .env.local | head -15
    else
        print_warning ".env.local not found. Creating basic environment file..."
        cat > .env.local << EOF
# WalletConnect Project ID (get from https://cloud.walletconnect.com/)
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=demo-project-id

# Default chain (base or polygon)
NEXT_PUBLIC_DEFAULT_CHAIN=base

# RPC URLs
NEXT_PUBLIC_BASE_RPC_URL=http://127.0.0.1:8545
NEXT_PUBLIC_POLYGON_RPC_URL=https://polygon-rpc.com

# Contract Addresses (update with deployed addresses)
NEXT_PUBLIC_RENTABLE_721_BASE=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_RENTABLE_721_POLYGON=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_LISTING_MANAGER_BASE=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_LISTING_MANAGER_POLYGON=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_RENTAL_MANAGER_BASE=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_RENTAL_MANAGER_POLYGON=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_ESCROW_BASE=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_ESCROW_POLYGON=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_SUB_PASS_1155_BASE=0x0000000000000000000000000000000000000000
NEXT_PUBLIC_SUB_PASS_1155_POLYGON=0x0000000000000000000000000000000000000000
EOF
    fi

    cd ..
}

# Test the setup
test_setup() {
    print_status "Testing the setup..."

    cd frontend

    # Try to build the frontend
    if npm run build > build.log 2>&1; then
        print_success "Frontend builds successfully"
        rm build.log
    else
        print_warning "Frontend build failed. Check build.log for details."
        echo "Build errors:"
        cat build.log | tail -20
    fi

    cd ..
}

# Main execution
main() {
    echo "ðŸŽ¯ NFT Rental Marketplace Development Environment Setup"
    echo "=================================================="

    check_dependencies
    start_anvil
    deploy_contracts
    setup_frontend
    test_setup

    echo ""
    print_success "ðŸŽ‰ Development environment setup complete!"
    echo ""
    echo "Next steps:"
    echo "1. Start the frontend development server:"
    echo "   cd frontend && npm run dev"
    echo ""
    echo "2. Open http://localhost:3000 in your browser"
    echo ""
    echo "3. Connect your wallet and start testing the marketplace!"
    echo ""
    echo "To stop Anvil later, run: pkill -f anvil"
}

# Cleanup function
cleanup() {
    if [ ! -z "$ANVIL_PID" ]; then
        print_status "Stopping Anvil..."
        kill $ANVIL_PID 2>/dev/null || true
    fi
}

# Set trap to cleanup on exit
trap cleanup EXIT

# Run main function
main