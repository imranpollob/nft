#!/bin/bash

# Quick redeploy script for NFT Rental Marketplace
# This script redeploys contracts and updates the frontend environment

set -e  # Exit on any error

echo "ðŸ”„ Redeploying NFT Rental Marketplace contracts..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if Anvil is running
check_anvil() {
    if ! pgrep -f anvil > /dev/null; then
        print_error "Anvil is not running. Please start it with: anvil"
        exit 1
    fi
}

# Deploy contracts
deploy_contracts() {
    print_status "Building and deploying contracts..."

    # Set the private key for deployment (Anvil's default first account)
    export PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

    # Build contracts
    forge build

    # Deploy contracts and capture output
    print_status "Deploying contracts..."
    DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol --rpc-url http://127.0.0.1:8545 --broadcast --private-key $PRIVATE_KEY 2>&1)

    # Check if deployment was successful
    if echo "$DEPLOY_OUTPUT" | grep -q "Error:"; then
        print_error "Deployment failed:"
        echo "$DEPLOY_OUTPUT"
        exit 1
    fi

    # Parse addresses from deployment output
    RENTABLE_721=$(echo "$DEPLOY_OUTPUT" | grep "RENTABLE_721:" | awk '{print $2}')
    LISTING_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "LISTING_MANAGER:" | awk '{print $2}')
    RENTAL_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "RENTAL_MANAGER:" | awk '{print $2}')
    ESCROW=$(echo "$DEPLOY_OUTPUT" | grep "ESCROW:" | awk '{print $2}')
    SUB_PASS_1155=$(echo "$DEPLOY_OUTPUT" | grep "SUB_PASS_1155:" | awk '{print $2}')

    # Generate .env.local file
    cat > frontend/.env.local << EOF
# Contract Addresses (Auto-generated by deployment script)
NEXT_PUBLIC_RENTABLE_721_BASE=$RENTABLE_721
NEXT_PUBLIC_RENTABLE_721_POLYGON=$RENTABLE_721
NEXT_PUBLIC_RENTABLE_721_ANVIL=$RENTABLE_721
NEXT_PUBLIC_LISTING_MANAGER_BASE=$LISTING_MANAGER
NEXT_PUBLIC_LISTING_MANAGER_POLYGON=$LISTING_MANAGER
NEXT_PUBLIC_LISTING_MANAGER_ANVIL=$LISTING_MANAGER
NEXT_PUBLIC_RENTAL_MANAGER_BASE=$RENTAL_MANAGER
NEXT_PUBLIC_RENTAL_MANAGER_POLYGON=$RENTAL_MANAGER
NEXT_PUBLIC_RENTAL_MANAGER_ANVIL=$RENTAL_MANAGER
NEXT_PUBLIC_ESCROW_BASE=$ESCROW
NEXT_PUBLIC_ESCROW_POLYGON=$ESCROW
NEXT_PUBLIC_ESCROW_ANVIL=$ESCROW
NEXT_PUBLIC_SUB_PASS_1155_BASE=$SUB_PASS_1155
NEXT_PUBLIC_SUB_PASS_1155_POLYGON=$SUB_PASS_1155
NEXT_PUBLIC_SUB_PASS_1155_ANVIL=$SUB_PASS_1155
EOF

    print_success "Environment file updated at frontend/.env.local"
}

# Setup demo data
setup_demo() {
    print_status "Setting up demo NFTs and listings..."

    # Export addresses for the setup script
    export RENTABLE_721=$RENTABLE_721
    export LISTING_MANAGER=$LISTING_MANAGER
    export RENTAL_MANAGER=$RENTAL_MANAGER
    export PRIVATE_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80

    # Run setup script
    SETUP_OUTPUT=$(forge script script/SetupDemo.s.sol --rpc-url http://127.0.0.1:8545 --broadcast --private-key $PRIVATE_KEY 2>&1)

    if echo "$SETUP_OUTPUT" | grep -q "Error:"; then
        print_error "Demo setup failed:"
        echo "$SETUP_OUTPUT"
        exit 1
    fi

    print_success "Demo NFTs minted and listings created"
}

# Main execution
main() {
    check_anvil
    deploy_contracts
    setup_demo

    echo ""
    echo "ðŸ“„ Updated .env.local with new contract addresses"
    echo "ðŸŽ¨ Demo NFTs minted and listed for rental"
    echo "ðŸš€ Frontend should automatically pick up the new addresses"
    echo "   (restart the dev server if changes don't appear)"
}

main